#/*******************************************************************************
# Requirement 1)
# when the distance between adversary and ego is larger than 2, no collison risk
# v_ego > 1, a_ego < 0; v_ego < 1, a_ego > 0; v_ego = 0, a_ego = 0  
# Input: v1, v2, v3, C  
# Output: a1, a2, a3
#                 	
#***************************************************************************/
dfa 6 6 3 3 1 81 
1 #initial state
6 #final state

1 1 -1 -2 -3 4 -6 -7 -8 9  # no collision risk, s1: speed > 1, slow down 
1 2 -1 -2 3 -4 -6 -7 8 -9

1 6 -1 -2 -3 4 -6 7 -8 -9 # input should go to s1, but not
1 6 -1 -2 -3 4 -6 -7 8 -9
1 6 -1 -2 -3 4 -6 7 8
1 6 -1 -2 -3 4 -6 -7 8 9
1 6 -1 -2 -3 4 -6 7 -8 9
1 6 -1 -2 -3 4 -6 -7 -8 -9

1 6 -1 -2 3 -4 -6 7 -8 -9 # input should go to s2, but not
1 6 -1 -2 3 -4 -6 -7 -8 9
1 6 -1 -2 3 -4 -6 7 8
1 6 -1 -2 3 -4 -6 -7 8 9
1 6 -1 -2 3 -4 -6 7 -8 9
1 6 -1 -2 3 -4 -6 -7 -8 -9

2 2 -1 -2 3 -4 -6 -7 8 -9  # no collision risk, s2: speed == 1, keep it
2 1 -1 -2 -3 4 -6 -7 -8 9
2 3 -1 2 -3 -4 -6 7 -8 -9

2 6 -1 -2 3 -4 -6 7 -8 -9 # input should go to s2, but not
2 6 -1 -2 3 -4 -6 -7 -8 9
2 6 -1 -2 3 -4 -6 7 8
2 6 -1 -2 3 -4 -6 -7 8 9
2 6 -1 -2 3 -4 -6 7 -8 9
2 6 -1 -2 3 -4 -6 -7 -8 -9

2 6 -1 -2 -3 4 -6 7 -8 -9 # input should go to s1, but not
2 6 -1 -2 -3 4 -6 -7 8 -9
2 6 -1 -2 -3 4 -6 7 8
2 6 -1 -2 -3 4 -6 -7 8 9
2 6 -1 -2 -3 4 -6 7 -8 9
2 6 -1 -2 -3 4 -6 -7 -8 -9

2 6 -1 2 -3 -4 -6 -7 -8 9 # input should go to s3, but not
2 6 -1 2 -3 -4 -6 -7 8 -9
2 6 -1 2 -3 -4 -6 7 8
2 6 -1 2 -3 -4 -6 -7 8 9
2 6 -1 2 -3 -4 -6 7 -8 9
2 6 -1 2 -3 -4 -6 -7 -8 -9

3 3 -1 2 -3 -4 -6 7 -8 -9 # no collision risk, s3: speed < 1, accelerate
3 2 -1 -2 3 -4 -6 -7 8 -9

3 6 -1 2 -3 -4 -6 -7 8 -9  # input should go to s3, but not
3 6 -1 2 -3 -4 -6 -7 -8 9
3 6 -1 2 -3 -4 -6 7 8
3 6 -1 2 -3 -4 -6 -7 8 9
3 6 -1 2 -3 -4 -6 7 -8 9
3 6 -1 2 -3 -4 -6 -7 -8 -9

3 6 -1 -2 3 -4 -6 7 -8 -9 # input should go to s2, but not
3 6 -1 -2 3 -4 -6 -7 -8 9
3 6 -1 -2 3 -4 -6 7 8
3 6 -1 -2 3 -4 -6 -7 8 9
3 6 -1 -2 3 -4 -6 7 -8 9
3 6 -1 -2 3 -4 -6 -7 -8 -9

4 3 -1 2 -3 -4 5 6 # s4 can only go back, when tn is set and no risk anymore 

4 4 1
4 4 -1 -5
4 4 -1 5 -6

1 5 6 # s5 relax: tn will only be set after stop at risk for 2s
2 5 6
3 5 6

1 5 -1 2 3 -6  # s5 relax: infeasible input
1 5 -1 -2 3 4 -6
1 5 -1 2 -3 4 -6
1 5 -1 -2 -3 -4 -6

2 5 -1 2 3 -6
2 5 -1 -2 3 4 -6
2 5 -1 2 -3 4 -6
2 5 -1 -2 -3 -4 -6

3 5 -1 2 3 -6
3 5 -1 -2 3 4 -6
3 5 -1 2 -3 4 -6
3 5 -1 -2 -3 -4 -6

4 5 -1 -2 3 -4 5 6
4 5 -1 -2 -3 4 5 6
4 5 -1 2 3 5 6
4 5 -1 -2 3 4 5 6
4 5 -1 2 -3 4 5 6
4 5 -1 -2 -3 -4 5 6

1 5 -1 2 -3 -4 -6 # s1 cannot go to s3 directly without speed ==1
3 5 -1 -2 -3 4 -6
1 4 1 -6 # s4: handle collision
2 4 1 -6
3 4 1 -6
5 5
6 6

1 C ((x_ego - y_adv) < 4 & (x_ego - y_adv) > -4) #input
2 v1 (v_ego < 2) #input the velocity is larger than 1 
3 v2 (v_ego == 2) #input
4 v3 (v_ego > 2) #input
5 v01 (v_ego <= 0.1) #input after the < 2 distance, v should be 0.1
6 tn  (t>2) # input, a stop state detector: counter will only be trigger when v<=0.1, and after 2s, it will be set to true for one state. and then reset again
7 a1 (a_ego > 0) #output
8 a2 (a_ego == 0) #output
9 a3 (a_ego < 0) #output
#/*******************************************************************************
# Requirement 2) 
# when the distance between adversary car and ego is less than 2, then the ego car should reduce the velocity
# |y_ego - x_adv| < 2 => [0,2]|v_ego| < 0.1 
# Input: C, v01, vL01, vS01, t1, t2, t3 
# Output: a1, a2, a3
#                 	
#***************************************************************************/
dfa 5 3 3 1 1 41
1 #initial state
5 #final state :5, relaxing state :4
1 1 -1 -3 # no collision risk
1 2 1 -2 -3 -4 -5 6 # coliision risk, and v >0.1, should slow down
1 3 1 2 -3 -4 5 -6# if v<=0.1, stop there
1 5 1 -2 -3 4 -5 -6
1 5 1 -2 -3 -4 5 -6
1 5 1 2 -3 4 -5 -6
1 5 1 2 -3 -4 -5 6


2 2 -2 -3 -4 -5 6 #keep slowing down
2 3 2 -3 -4 5 -6 #until v<=0.1, stop there
2 5 -2 -3 4 -5 -6
2 5 -2 -3 -4 5 -6
2 5 2 -3 4 -5 -6
2 5 2 -3 -4 -5 6


3 3 2 -3 -4 5 -6 #keep stop, if tn is not set
3 3 1 2 3 -4 5 -6 #even tn is set, but still under risk, keep stop there
3 1 -1 2 3 #tn is set, and no risk now. go back to s1
3 4 -2 # impossible to increase velocity, before state with a>0 
3 5 2 -3 4 -5 -6
3 5 2 -3 -4 -5 6
3 5 1 2 3 4 -5 -6
3 5 1 2 3 -4 -5 6


1 4 3 # timer should not be triggered in s1 and s2, before stop
2 4 3


1 5 1 -3 4 5  # infeasible outputs
1 5 1 -3 -4 5 6
1 5 1 -3 4 -5 6
1 5 1 -3 -4 -5 -6

2 5 -3 4 5
2 5 -3 -4 5 6
2 5 -3 4 -5 6
2 5 -3 -4 -5 -6

3 5 1 2 3 4 5
3 5 1 2 3 -4 5 6
3 5 1 2 3 4 -5 6
3 5 1 2 3 -4 -5 -6
3 5 2 -3 4 5
3 5 2 -3 -4 5 6
3 5 2 -3 4 -5 6
3 5 2 -3 -4 -5 -6

4 4
5 5
1 C #((x_ego - y_adv) < 2 & (x_ego - y_adv) > -2) #input
2 v01 #(v <= 0.1) #input after the < 2 distance, v should be 0.1
3 tn #(t<2) # input, a stop state detector: counter will only be trigger when v<=0.1, and after 2s, it will be set to true for one state. and then reset again
4 a1 (a_ego > 0) #output
5 a2 (a_ego == 0) #output
6 a3 (a_ego < 0) #output


#/***********************************************************
# Requirement in the normal mode
# 1) safe distance
# always(pos_lead[t] - pos_ego[t] > d_safe) d_safe is some fixed distance
# 2) cruise-model
# (pos_lead[t] – pos_ego[t] > d_cruise)  Until_[0,10]  (abs(v_ego[t] – v_cruise) < v_tol )
# 3) vehicle doesn't travel backward
# Always(v_ego[t]) >= 0
# 4) vehicle doesn;t halt unless the lead vechicles halt
# Always(v_lead[t] > 0 => v_ego[t] > 0)
# 5) when d_safe < d < d_cruise, always (-2 < a_lead[t] < 2)
# 6) v_cruise, d_cruise, v_tol are the fixed value.
# we assume v_tol = 1.5, d_cruise = 10, d_safe = 6
# input: d1, d2, v2, a1, t1, t2, t3
# output: v1, v3, a2, v4 
#************************************************************/

dfa 3 1 1 1 1 4
1 # inital state
2 # error state
1 1 -1
1 1 1 -2
1 2 1 2 # lead vehicle is moving, ego cannot stop
2 2
1 vl (v_lead > 0) # input, lead vehicle moving forward
2 v0 (v_ego == 0) # output, ego vehichle stop